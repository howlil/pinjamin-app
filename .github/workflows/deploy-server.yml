name: Deploy Server to GCP VM

on:
  push:
    branches:
      - main
    paths:
      - 'server/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install SSH tools
      run: |
        sudo apt-get update
        sudo apt-get install -y sshpass

    - name: Test SSH connection
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.GCP_VM_IP }} >> ~/.ssh/known_hosts
        echo "Testing SSH connection..."
        sshpass -p '${{ secrets.GCP_VM_PASSWORD }}' ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 ${{ secrets.GCP_VM_USER }}@${{ secrets.GCP_VM_IP }} 'echo "SSH connection successful!"'

    - name: Setup project directory
      run: |
        sshpass -p '${{ secrets.GCP_VM_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_VM_USER }}@${{ secrets.GCP_VM_IP }} '
          cd ~ || exit 1
          if [ ! -d "pbf-server" ]; then
            echo "Cloning repository..."
            git clone https://github.com/${{ github.repository }}.git pbf-server
          fi
          cd pbf-server
          echo "Pulling latest changes..."
          git fetch origin
          git reset --hard origin/main
        '

    - name: Install dependencies
      run: |
        sshpass -p '${{ secrets.GCP_VM_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_VM_USER }}@${{ secrets.GCP_VM_IP }} '
          cd ~/pbf-server/server
          
          # Check Node.js
          if ! command -v node >/dev/null 2>&1; then
            echo "Installing Node.js..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi
          
          # Check pnpm
          if ! command -v pnpm >/dev/null 2>&1; then
            echo "Installing pnpm..."
            sudo npm install -g pnpm
          fi
          
          # Check PM2
          if ! command -v pm2 >/dev/null 2>&1; then
            echo "Installing PM2..."
            sudo npm install -g pm2
          fi
          
          echo "Installing project dependencies..."
          pnpm install
          pnpm run db:generate
        '

    - name: Create configuration files
      run: |
        sshpass -p '${{ secrets.GCP_VM_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_VM_USER }}@${{ secrets.GCP_VM_IP }} '
          cd ~/pbf-server/server
          
          # Create ecosystem.config.js
          cat > ecosystem.config.js << EOF
module.exports = {
  apps: [{
    name: "pbf-server",
    script: "./app.js",
    instances: 1,
    autorestart: true,
    watch: false,
    max_memory_restart: "1G",
    env: {
      NODE_ENV: "production",
      PORT: 3000
    }
  }]
};
EOF
        '

    - name: Setup environment variables
      run: |
        sshpass -p '${{ secrets.GCP_VM_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_VM_USER }}@${{ secrets.GCP_VM_IP }} '
          cd ~/pbf-server/server
          
          # Create .env file
          cat > .env << EOF
DATABASE_URL="${{ secrets.DATABASE_URL }}"
JWT_SECRET="${{ secrets.JWT_SECRET }}"
EMAIL_USER="${{ secrets.EMAIL_USER }}"
EMAIL_PASS="${{ secrets.EMAIL_PASS }}"
XENDIT_SECRET_KEY="${{ secrets.XENDIT_SECRET_KEY }}"
PUSHER_APP_ID="${{ secrets.PUSHER_APP_ID }}"
PUSHER_KEY="${{ secrets.PUSHER_KEY }}"
PUSHER_SECRET="${{ secrets.PUSHER_SECRET }}"
PUSHER_CLUSTER="${{ secrets.PUSHER_CLUSTER }}"
EOF
        '

    - name: Deploy and start application
      run: |
        sshpass -p '${{ secrets.GCP_VM_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_VM_USER }}@${{ secrets.GCP_VM_IP }} '
          cd ~/pbf-server/server
          
          echo "Stopping existing PM2 process..."
          pm2 stop pbf-server || true
          pm2 delete pbf-server || true
          
          echo "Starting application..."
          pm2 start ecosystem.config.js
          pm2 save
          
          echo "Setting up PM2 startup..."
          sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u $USER --hp $HOME || true
          
          echo "Deployment completed successfully!"
          pm2 list
        ' 