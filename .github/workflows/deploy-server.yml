name: Deploy Server to GCP VM

on:
  push:
    branches:
      - main
    paths:
      - 'server/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.GCP_VM_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.GCP_VM_IP }} >> ~/.ssh/known_hosts

    - name: Deploy to GCP VM
      run: |
        echo "ðŸš€ Deploy to VM: ${{ secrets.GCP_VM_IP }}"
        
        # Clone/update repo
        ssh -i ~/.ssh/id_rsa ${{ secrets.GCP_VM_USER }}@${{ secrets.GCP_VM_IP }} '
          cd ~
          if [ ! -d pbf-server ]; then
            git clone https://github.com/${{ github.repository }}.git pbf-server
          else
            cd pbf-server
            git fetch origin
            git reset --hard origin/main
          fi
        '
        
        # Install dependencies
        ssh -i ~/.ssh/id_rsa ${{ secrets.GCP_VM_USER }}@${{ secrets.GCP_VM_IP }} '
          cd ~/pbf-server/server
          if ! command -v node >/dev/null; then
            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi
          if ! command -v pnpm >/dev/null; then
            sudo npm install -g pnpm
          fi
          if ! command -v pm2 >/dev/null; then
            sudo npm install -g pm2
          fi
          pnpm install
          pnpm run db:generate || echo "No db:generate script"
        '
        
        # Create config files
        ssh -i ~/.ssh/id_rsa ${{ secrets.GCP_VM_USER }}@${{ secrets.GCP_VM_IP }} '
          cd ~/pbf-server/server
          
          # PM2 config
          echo "module.exports = {" > ecosystem.config.js
          echo "  apps: [{" >> ecosystem.config.js
          echo "    name: \"pbf-server\"," >> ecosystem.config.js
          echo "    script: \"./app.js\"," >> ecosystem.config.js
          echo "    instances: 1," >> ecosystem.config.js
          echo "    autorestart: true," >> ecosystem.config.js
          echo "    watch: false," >> ecosystem.config.js
          echo "    env: {" >> ecosystem.config.js
          echo "      NODE_ENV: \"production\"," >> ecosystem.config.js
          echo "      PORT: 3000" >> ecosystem.config.js
          echo "    }" >> ecosystem.config.js
          echo "  }]" >> ecosystem.config.js
          echo "};" >> ecosystem.config.js
          
          # Environment file
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "EMAIL_USER=${{ secrets.EMAIL_USER }}" >> .env
          echo "EMAIL_PASS=${{ secrets.EMAIL_PASS }}" >> .env
          echo "XENDIT_SECRET_KEY=${{ secrets.XENDIT_SECRET_KEY }}" >> .env
          echo "PUSHER_APP_ID=${{ secrets.PUSHER_APP_ID }}" >> .env
          echo "PUSHER_KEY=${{ secrets.PUSHER_KEY }}" >> .env
          echo "PUSHER_SECRET=${{ secrets.PUSHER_SECRET }}" >> .env
          echo "PUSHER_CLUSTER=${{ secrets.PUSHER_CLUSTER }}" >> .env
        '
        
        # Start app
        ssh -i ~/.ssh/id_rsa ${{ secrets.GCP_VM_USER }}@${{ secrets.GCP_VM_IP }} '
          cd ~/pbf-server/server
          pm2 stop pbf-server || true
          pm2 delete pbf-server || true
          pm2 start ecosystem.config.js
          pm2 save
          echo "âœ… Deployed!"
          pm2 list
        '

    - name: Cleanup SSH Key
      if: always()
      run: |
        rm -f ~/.ssh/id_rsa