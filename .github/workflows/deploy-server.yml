name: Deploy Server to GCP VM

on:
  push:
    branches:
      - main
    paths:
      - 'server/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install SSH tools
      run: |
        sudo apt-get update
        sudo apt-get install -y sshpass

    - name: Test SSH connection
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.GCP_VM_IP }} >> ~/.ssh/known_hosts
        echo "Testing SSH connection..."
        sshpass -p '${{ secrets.GCP_VM_PASSWORD }}' ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 ${{ secrets.GCP_VM_USER }}@${{ secrets.GCP_VM_IP }} 'echo "SSH connection successful!"'

    - name: Setup project directory
      run: |
        sshpass -p '${{ secrets.GCP_VM_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_VM_USER }}@${{ secrets.GCP_VM_IP }} '
          cd ~ || exit 1
          if [ ! -d "pbf-server" ]; then
            echo "Cloning repository..."
            git clone https://github.com/${{ github.repository }}.git pbf-server
          fi
          cd pbf-server
          echo "Pulling latest changes..."
          git fetch origin
          git reset --hard origin/main
        '

    - name: Install dependencies
      run: |
        sshpass -p '${{ secrets.GCP_VM_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_VM_USER }}@${{ secrets.GCP_VM_IP }} '
          cd ~/pbf-server/server
          
          if ! command -v node >/dev/null 2>&1; then
            echo "Installing Node.js..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi
          
          if ! command -v pnpm >/dev/null 2>&1; then
            echo "Installing pnpm..."
            sudo npm install -g pnpm
          fi
          
          if ! command -v pm2 >/dev/null 2>&1; then
            echo "Installing PM2..."
            sudo npm install -g pm2
          fi
          
          echo "Installing project dependencies..."
          pnpm install
          pnpm run db:generate
        '

    - name: Create ecosystem config
      run: |
        sshpass -p '${{ secrets.GCP_VM_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_VM_USER }}@${{ secrets.GCP_VM_IP }} '
          cd ~/pbf-server/server
          echo "Creating ecosystem config..."
          echo "module.exports = {" > ecosystem.config.js
          echo "  apps: [{" >> ecosystem.config.js
          echo "    name: \"pbf-server\"," >> ecosystem.config.js
          echo "    script: \"./app.js\"," >> ecosystem.config.js
          echo "    instances: 1," >> ecosystem.config.js
          echo "    autorestart: true," >> ecosystem.config.js
          echo "    watch: false," >> ecosystem.config.js
          echo "    max_memory_restart: \"1G\"," >> ecosystem.config.js
          echo "    env: {" >> ecosystem.config.js
          echo "      NODE_ENV: \"production\"," >> ecosystem.config.js
          echo "      PORT: 3000" >> ecosystem.config.js
          echo "    }" >> ecosystem.config.js
          echo "  }]" >> ecosystem.config.js
          echo "};" >> ecosystem.config.js
        '

    - name: Setup environment variables
      run: |
        sshpass -p '${{ secrets.GCP_VM_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_VM_USER }}@${{ secrets.GCP_VM_IP }} '
          cd ~/pbf-server/server
          echo "Setting up environment variables..."
          echo "DATABASE_URL=\"${{ secrets.DATABASE_URL }}\"" > .env
          echo "JWT_SECRET=\"${{ secrets.JWT_SECRET }}\"" >> .env
          echo "EMAIL_USER=\"${{ secrets.EMAIL_USER }}\"" >> .env
          echo "EMAIL_PASS=\"${{ secrets.EMAIL_PASS }}\"" >> .env
          echo "XENDIT_SECRET_KEY=\"${{ secrets.XENDIT_SECRET_KEY }}\"" >> .env
          echo "PUSHER_APP_ID=\"${{ secrets.PUSHER_APP_ID }}\"" >> .env
          echo "PUSHER_KEY=\"${{ secrets.PUSHER_KEY }}\"" >> .env
          echo "PUSHER_SECRET=\"${{ secrets.PUSHER_SECRET }}\"" >> .env
          echo "PUSHER_CLUSTER=\"${{ secrets.PUSHER_CLUSTER }}\"" >> .env
        '

    - name: Deploy and start application
      run: |
        sshpass -p '${{ secrets.GCP_VM_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_VM_USER }}@${{ secrets.GCP_VM_IP }} '
          cd ~/pbf-server/server
          
          echo "Stopping existing PM2 process..."
          pm2 stop pbf-server 2>/dev/null || true
          pm2 delete pbf-server 2>/dev/null || true
          
          echo "Starting application..."
          pm2 start ecosystem.config.js
          pm2 save
          
          echo "Setting up PM2 startup..."
          sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u $USER --hp $HOME 2>/dev/null || true
          
          echo "Deployment completed successfully!"
          pm2 list
        ' 