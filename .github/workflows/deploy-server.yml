name: Deploy Server to GCP VM

on:
  push:
    branches:
      - main
    paths:
      - 'server/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.GCP_VM_SSH_PRIVATE_KEY }}

    - name: Add VM to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.GCP_VM_IP }} >> ~/.ssh/known_hosts

    - name: Deploy to GCP VM
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_VM_USER }}@${{ secrets.GCP_VM_IP }} '
          # Navigate to project directory
          cd /home/${{ secrets.GCP_VM_USER }}/pbf-server || {
            echo "Project directory not found. Cloning repository..."
            git clone https://github.com/${{ github.repository }}.git pbf-server
            cd pbf-server
          }

          # Pull latest changes
          git fetch origin
          git reset --hard origin/main

          # Navigate to server directory
          cd server

          # Install/update Node.js and npm if needed
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs

          # Install pnpm globally if not already installed
          sudo npm install -g pnpm

          # Install PM2 globally if not already installed
          sudo npm install -g pm2

          # Install dependencies
          pnpm install

          # Generate Prisma client
          pnpm run db:generate

          # Create ecosystem file if it does not exist
          if [ ! -f ecosystem.config.js ]; then
            cat > ecosystem.config.js << EOL
module.exports = {
  apps: [{
    name: "pbf-server",
    script: "./app.js",
    instances: 1,
    autorestart: true,
    watch: false,
    max_memory_restart: "1G",
    env: {
      NODE_ENV: "production",
      PORT: 3000
    }
  }]
};
EOL
          fi

          # Create .env file from secrets if it does not exist
          if [ ! -f .env ]; then
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "EMAIL_USER=${{ secrets.EMAIL_USER }}" >> .env
            echo "EMAIL_PASS=${{ secrets.EMAIL_PASS }}" >> .env
            echo "XENDIT_SECRET_KEY=${{ secrets.XENDIT_SECRET_KEY }}" >> .env
            echo "PUSHER_APP_ID=${{ secrets.PUSHER_APP_ID }}" >> .env
            echo "PUSHER_KEY=${{ secrets.PUSHER_KEY }}" >> .env
            echo "PUSHER_SECRET=${{ secrets.PUSHER_SECRET }}" >> .env
            echo "PUSHER_CLUSTER=${{ secrets.PUSHER_CLUSTER }}" >> .env
          fi

          # Stop existing PM2 process
          pm2 stop pbf-server || true

          # Start or restart the application
          pm2 start ecosystem.config.js

          # Save PM2 configuration
          pm2 save

          # Setup PM2 startup script
          sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u ${{ secrets.GCP_VM_USER }} --hp /home/${{ secrets.GCP_VM_USER }} || true
        ' 