name: Deploy Server to GCP VM

on:
  push:
    branches:
      - main
    paths:
      - 'server/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.GCP_VM_SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H ${{ secrets.GCP_VM_IP }} >> ~/.ssh/known_hosts
        
        # Create SSH config
        cat > ~/.ssh/config << EOF
        Host gcp-vm
            HostName ${{ secrets.GCP_VM_IP }}
            User ${{ secrets.GCP_VM_USER }}
            IdentityFile ~/.ssh/deploy_key
            IdentitiesOnly yes
            StrictHostKeyChecking no
        EOF
        chmod 600 ~/.ssh/config

    - name: Deploy to GCP VM
      run: |
        ssh gcp-vm '
          # Navigate to project directory
          cd ~/pbf-server || {
            echo "Project directory not found. Cloning repository..."
            git clone https://github.com/${{ github.repository }}.git pbf-server
            cd pbf-server
          }

          # Pull latest changes
          git fetch origin
          git reset --hard origin/main

          # Navigate to server directory
          cd server

          # Install/update Node.js and npm if needed
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs

          # Install pnpm globally if not already installed
          sudo npm install -g pnpm

          # Install PM2 globally if not already installed
          sudo npm install -g pm2

          # Install dependencies
          pnpm install

          # Generate Prisma client
          pnpm run db:generate

          # Create ecosystem file if it does not exist
          if [ ! -f ecosystem.config.js ]; then
            echo "module.exports = {" > ecosystem.config.js
            echo "  apps: [{" >> ecosystem.config.js
            echo "    name: \"pbf-server\"," >> ecosystem.config.js
            echo "    script: \"./app.js\"," >> ecosystem.config.js
            echo "    instances: 1," >> ecosystem.config.js
            echo "    autorestart: true," >> ecosystem.config.js
            echo "    watch: false," >> ecosystem.config.js
            echo "    max_memory_restart: \"1G\"," >> ecosystem.config.js
            echo "    env: {" >> ecosystem.config.js
            echo "      NODE_ENV: \"production\"," >> ecosystem.config.js
            echo "      PORT: 3000" >> ecosystem.config.js
            echo "    }" >> ecosystem.config.js
            echo "  }]" >> ecosystem.config.js
            echo "};" >> ecosystem.config.js
          fi

          # Create .env file from secrets if it does not exist
          if [ ! -f .env ]; then
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "EMAIL_USER=${{ secrets.EMAIL_USER }}" >> .env
            echo "EMAIL_PASS=${{ secrets.EMAIL_PASS }}" >> .env
            echo "XENDIT_SECRET_KEY=${{ secrets.XENDIT_SECRET_KEY }}" >> .env
            echo "PUSHER_APP_ID=${{ secrets.PUSHER_APP_ID }}" >> .env
            echo "PUSHER_KEY=${{ secrets.PUSHER_KEY }}" >> .env
            echo "PUSHER_SECRET=${{ secrets.PUSHER_SECRET }}" >> .env
            echo "PUSHER_CLUSTER=${{ secrets.PUSHER_CLUSTER }}" >> .env
          fi

          # Stop existing PM2 process
          pm2 stop pbf-server || true

          # Start or restart the application
          pm2 start ecosystem.config.js

          # Save PM2 configuration
          pm2 save

          # Setup PM2 startup script
          sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u $USER --hp $HOME || true
        ' 