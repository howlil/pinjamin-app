name: Deploy Backend to Cloud Run

on:
  push:
    branches:
      - main
    paths:
      - 'server/**'
  pull_request:
    branches:
      - main
    paths:
      - 'server/**'
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: pbf-server
  REGION: asia-southeast2
  REGISTRY_URL: asia-southeast2-docker.pkg.dev

jobs:
  # Test dan Linting untuk Backend
  test:
    name: Test Backend
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    defaults:
      run:
        working-directory: ./server
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'
        cache-dependency-path: server/pnpm-lock.yaml

    - name: Install pnpm
      run: npm install -g pnpm

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Generate Prisma Client
      run: pnpm run db:generate

    - name: Run tests (if available)
      run: pnpm test || echo "No tests defined"
      continue-on-error: true

    - name: Check code syntax
      run: node -c app.js

  # Build dan Deploy ke Cloud Run
  deploy:
    name: Build and Deploy Backend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [test]
    # Jika tidak ada test job, hapus needs di atas
    
    defaults:
      run:
        working-directory: ./server
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Authenticate dengan Google Cloud menggunakan Service Account Key
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    # Configure Docker untuk Artifact Registry
    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker
        gcloud auth configure-docker $REGISTRY_URL

    # Buat Artifact Registry repository jika belum ada
    - name: Create Artifact Registry repository
      run: |
        gcloud artifacts repositories create $SERVICE_NAME \
          --repository-format=docker \
          --location=$REGION \
          --description="Docker repository for $SERVICE_NAME" || echo "Repository already exists"

    # Get commit SHA untuk image tagging
    - name: Get commit SHA
      id: vars
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    # Build Docker image
    - name: Build Docker image
      run: |
        docker build \
          -t $REGISTRY_URL/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:${{ steps.vars.outputs.sha_short }} \
          -t $REGISTRY_URL/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:latest \
          .

    # Push Docker image ke Artifact Registry
    - name: Push Docker image
      run: |
        docker push $REGISTRY_URL/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:${{ steps.vars.outputs.sha_short }}
        docker push $REGISTRY_URL/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:latest

    # Deploy ke Cloud Run
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image $REGISTRY_URL/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:${{ steps.vars.outputs.sha_short }} \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --port 8080 \
          --memory 1Gi \
          --cpu 1 \
          --min-instances 0 \
          --max-instances 10 \
          --timeout 300 \
          --concurrency 80 \
          --service-account pbf-server-sa@$PROJECT_ID.iam.gserviceaccount.com \
          --add-cloudsql-instances $PROJECT_ID:$REGION:pbf-database \
          --set-env-vars NODE_ENV=production,PORT=8080 \
          --set-secrets DATABASE_URL=database-url:latest,JWT_SECRET=jwt-secret:latest,XENDIT_SECRET_KEY=xendit-secret-key:latest,PUSHER_APP_ID=pusher-app-id:latest,PUSHER_KEY=pusher-key:latest,PUSHER_SECRET=pusher-secret:latest,SMTP_USER=smtp-user:latest,SMTP_PASS=smtp-pass:latest

    # Get service URL
    - name: Get service URL
      id: service
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format="value(status.url)")
        echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT

    # Test deployment
    - name: Test deployment
      run: |
        echo "Waiting for service to be ready..."
        sleep 30
        
        # Test health endpoint
        if curl -f --max-time 30 "${{ steps.service.outputs.url }}/health"; then
          echo "‚úÖ Health check passed"
        else
          echo "‚ùå Health check failed"
          exit 1
        fi

    # Deployment summary
    - name: Deployment Summary
      run: |
        echo "üöÄ Backend deployment completed successfully!"
        echo ""
        echo "üìä Deployment Details:"
        echo "Service Name: $SERVICE_NAME"
        echo "Region: $REGION"
        echo "Image: $REGISTRY_URL/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:${{ steps.vars.outputs.sha_short }}"
        echo ""
        echo "üîó URLs:"
        echo "Service URL: ${{ steps.service.outputs.url }}"
        echo "API Base URL: ${{ steps.service.outputs.url }}/api/v1"
        echo "API Documentation: ${{ steps.service.outputs.url }}/api-docs"
        echo "Health Check: ${{ steps.service.outputs.url }}/health"

    # Update frontend environment (optional)
    - name: Update Frontend Environment
      run: |
        echo "Backend deployed at: ${{ steps.service.outputs.url }}"
        echo "Update your frontend VITE_API_BASE_URL to: ${{ steps.service.outputs.url }}/api/v1" 