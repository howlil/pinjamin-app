openapi: 3.0.0
info:
  title: Building Rental API
  version: 1.0.0
  description: RESTful API for Building Rental Management System
  contact:
    name: API Support
    email: support@buildingrental.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development server

security:
  - bearerAuth: []

tags:
  - name: General
    description: General API information and health checks
  - name: Authentication
    description: User authentication and profile management
  - name: Buildings
    description: Building management and information
  - name: Admin - Buildings
    description: Admin building management operations (requires admin authentication)
  - name: Bookings
    description: Booking management operations
  - name: Dashboard
    description: Dashboard statistics operations (requires admin authentication)
  - name: Admin - Bookings
    description: Admin booking management operations (requires admin authentication)

paths:
  /api/v1:
    get:
      summary: Get API information
      tags: [General]
      responses:
        '200':
          description: API information retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          name:
                            type: string
                            example: "Building Rental API"
                          version:
                            type: string
                            example: "1.0.0"
                          description:
                            type: string
                            example: "RESTful API for Building Rental Management System"
                          timestamp:
                            type: string
                            format: date-time

  /api/v1/auth/register:
    post:
      summary: Register a new user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
                          token:
                            type: string
                            description: JWT authentication token
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/login:
    post:
      summary: Login user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
                          token:
                            type: string
                            description: JWT authentication token
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/profile:
    get:
      summary: Get user profile
      tags: [Authentication]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update user profile
      tags: [Authentication]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  minLength: 2
                  maxLength: 100
                  example: "John Doe Updated"
                email:
                  type: string
                  format: email
                  example: "john.updated@example.com"
                phoneNumber:
                  type: string
                  pattern: '^[0-9+\-\s()]+$'
                  minLength: 10
                  maxLength: 20
                  example: "+62812345679"
                borrowerType:
                  type: string
                  enum: ['INTERNAL_UNAND', 'EXTERNAL_UNAND']
                bankName:
                  type: string
                  minLength: 2
                  maxLength: 50
                  example: "Bank Mandiri"
                bankNumber:
                  type: string
                  pattern: '^[0-9]+$'
                  minLength: 8
                  maxLength: 20
                  example: "0987654321"
              minProperties: 1
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/logout:
    post:
      summary: Logout user
      tags: [Authentication]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/buildings:
    get:
      summary: Get all buildings with optional filters
      tags: [Buildings]
      parameters:
        - in: query
          name: search
          schema:
            type: string
            minLength: 1
            maxLength: 100
          description: Search buildings by name or description
          example: "Conference Room"
        - in: query
          name: buildingType
          schema:
            type: string
            enum: ['CLASSROOM', 'PKM', 'LABORATORY', 'MULTIFUNCTION', 'SEMINAR']
          description: Filter by building type
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of buildings per page
      responses:
        '200':
          description: Buildings retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          buildings:
                            type: array
                            items:
                              $ref: '#/components/schemas/Building'
                          pagination:
                            type: object
                            properties:
                              page:
                                type: integer
                              limit:
                                type: integer
                              total:
                                type: integer
                              totalPages:
                                type: integer
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/buildings/{id}:
    get:
      summary: Get building by ID
      tags: [Buildings]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Building ID
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Building retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Building'
        '400':
          description: Invalid building ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Building not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/buildings/check-availability:
    post:
      summary: Check building availability for a specific date and time
      tags: [Buildings]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckAvailabilityRequest'
      responses:
        '200':
          description: Availability check completed
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          availableBuildings:
                            type: array
                            items:
                              $ref: '#/components/schemas/Building'
                          requestedDateTime:
                            type: object
                            properties:
                              date:
                                type: string
                                example: "15-12-2024"
                              time:
                                type: string
                                example: "10:00"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/buildings/{id}/schedule:
    get:
      summary: Get building schedule
      tags: [Buildings]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Building ID
          example: "123e4567-e89b-12d3-a456-426614174000"
        - in: query
          name: month
          schema:
            type: integer
            minimum: 1
            maximum: 12
          description: Month (1-12)
          example: 12
        - in: query
          name: year
          schema:
            type: integer
            minimum: 2020
            maximum: 2030
          description: Year
          example: 2024
      responses:
        '200':
          description: Building schedule retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          building:
                            $ref: '#/components/schemas/Building'
                          schedule:
                            type: array
                            items:
                              type: object
                              properties:
                                date:
                                  type: string
                                  format: date
                                timeSlots:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      time:
                                        type: string
                                        example: "10:00"
                                      status:
                                        type: string
                                        enum: ['AVAILABLE', 'BOOKED']
                                      bookingInfo:
                                        type: object
                                        properties:
                                          borrowerName:
                                            type: string
                                          purpose:
                                            type: string
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Building not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/buildings/admin:
    get:
      summary: Get all buildings (Admin view with additional details)
      tags: [Admin - Buildings]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: search
          schema:
            type: string
            minLength: 1
            maxLength: 100
          description: Search buildings by name or description
          example: "Conference Room"
        - in: query
          name: buildingType
          schema:
            type: string
            enum: ['CLASSROOM', 'PKM', 'LABORATORY', 'MULTIFUNCTION', 'SEMINAR']
          description: Filter by building type
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of buildings per page
      responses:
        '200':
          description: Buildings retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          buildings:
                            type: array
                            items:
                              $ref: '#/components/schemas/Building'
                          pagination:
                            type: object
                            properties:
                              page:
                                type: integer
                              limit:
                                type: integer
                              total:
                                type: integer
                              totalPages:
                                type: integer
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a new building
      tags: [Admin - Buildings]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: ['buildingName', 'description', 'rentalPrice', 'capacity', 'location', 'buildingType']
              properties:
                buildingName:
                  type: string
                  minLength: 2
                  maxLength: 100
                  example: "Conference Room A"
                description:
                  type: string
                  minLength: 10
                  maxLength: 500
                  example: "Modern conference room with projector and air conditioning"
                rentalPrice:
                  type: number
                  minimum: 0
                  example: 500000
                capacity:
                  type: integer
                  minimum: 1
                  example: 50
                location:
                  type: string
                  minLength: 5
                  maxLength: 200
                  example: "Floor 2, Building A"
                buildingType:
                  type: string
                  enum: ['CLASSROOM', 'PKM', 'LABORATORY', 'MULTIFUNCTION', 'SEMINAR']
                image:
                  type: string
                  format: binary
                  description: Building image file (jpg, jpeg, png, gif)
                facilities:
                  type: string
                  description: JSON string of facilities array
                  example: '[{"facilityName":"Projector","iconUrl":"https://example.com/icon.png"}]'
                buildingManagers:
                  type: string
                  description: JSON string of building managers array
                  example: '[{"managerName":"Jane Smith","phoneNumber":"+62812345679"}]'
      responses:
        '201':
          description: Building created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Building'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/buildings/admin/{id}:
    patch:
      summary: Update a building
      tags: [Admin - Buildings]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Building ID
          example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              minProperties: 1
              properties:
                buildingName:
                  type: string
                  minLength: 2
                  maxLength: 100
                  example: "Updated Conference Room A"
                description:
                  type: string
                  minLength: 10
                  maxLength: 500
                  example: "Updated modern conference room with projector and air conditioning"
                rentalPrice:
                  type: number
                  minimum: 0
                  example: 600000
                capacity:
                  type: integer
                  minimum: 1
                  example: 60
                location:
                  type: string
                  minLength: 5
                  maxLength: 200
                  example: "Floor 3, Building A"
                buildingType:
                  type: string
                  enum: ['CLASSROOM', 'PKM', 'LABORATORY', 'MULTIFUNCTION', 'SEMINAR']
                image:
                  type: string
                  format: binary
                  description: Building image file (jpg, jpeg, png, gif)
                facilities:
                  type: string
                  description: JSON string of facilities array
                  example: '[{"id":"uuid","facilityName":"Projector","iconUrl":"https://example.com/icon.png"}]'
                buildingManagers:
                  type: string
                  description: JSON string of building managers array
                  example: '[{"id":"uuid","managerName":"Jane Smith","phoneNumber":"+62812345679"}]'
      responses:
        '200':
          description: Building updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Building'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Building not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a building
      tags: [Admin - Buildings]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Building ID
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Building deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid building ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Building not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/bookings:
    post:
      summary: Create a new booking
      tags: [Bookings]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: ['buildingId', 'activityName', 'startDate', 'startTime', 'endTime', 'proposalLetter']
              properties:
                buildingId:
                  type: string
                  format: uuid
                  description: Building ID to book
                  example: "123e4567-e89b-12d3-a456-426614174000"
                activityName:
                  type: string
                  minLength: 3
                  maxLength: 200
                  description: Name of the activity
                  example: "Annual Company Meeting"
                startDate:
                  type: string
                  pattern: '^\d{2}-\d{2}-\d{4}$'
                  description: Start date in DD-MM-YYYY format
                  example: "25-12-2024"
                endDate:
                  type: string
                  pattern: '^\d{2}-\d{2}-\d{4}$'
                  description: End date in DD-MM-YYYY format (optional)
                  example: "26-12-2024"
                startTime:
                  type: string
                  pattern: '^\d{2}:\d{2}$'
                  description: Start time in HH:MM format
                  example: "09:00"
                endTime:
                  type: string
                  pattern: '^\d{2}:\d{2}$'
                  description: End time in HH:MM format
                  example: "17:00"
                proposalLetter:
                  type: string
                  format: binary
                  description: Proposal letter in PDF format
      responses:
        '201':
          description: Booking created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          bookingId:
                            type: string
                            format: uuid
                            description: Unique identifier for the booking
                          buildingName:
                            type: string
                            description: Name of the booked building
                          startDate:
                            type: string
                            description: Start date in DD-MM-YYYY format
                          endDate:
                            type: string
                            description: End date in DD-MM-YYYY format
                          startTime:
                            type: string
                            description: Start time in HH:MM format
                          endTime:
                            type: string
                            description: End time in HH:MM format
                          status:
                            type: string
                            enum: ['PROCESSING']
                            description: Booking status
                          payment:
                            type: object
                            properties:
                              paymentUrl:
                                type: string
                                description: Xendit payment URL
                                example: "https://checkout.xendit.co/web/..."
        '400':
          description: Validation error or building not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Building not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/bookings/history:
    get:
      summary: Get booking history for authenticated user
      tags: [Bookings]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
          example: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
          example: 10
      responses:
        '200':
          description: Booking history retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            bookingId:
                              type: string
                              format: uuid
                              description: Unique identifier for the booking
                            buildingName:
                              type: string
                              description: Name of the booked building
                            startDate:
                              type: string
                              description: Start date in DD-MM-YYYY format
                              example: "25-12-2024"
                            endDate:
                              type: string
                              description: End date in DD-MM-YYYY format
                              example: "26-12-2024"
                            startTime:
                              type: string
                              description: Start time in HH:MM format
                              example: "09:00"
                            endTime:
                              type: string
                              description: End time in HH:MM format
                              example: "17:00"
                            status:
                              type: string
                              enum: ['APPROVED', 'PROCESSING', 'REJECTED', 'COMPLETED']
                              description: Current booking status
                      pagination:
                        type: object
                        properties:
                          totalItems:
                            type: integer
                            description: Total number of bookings
                            example: 25
                          totalPages:
                            type: integer
                            description: Total number of pages
                            example: 3
                          currentPage:
                            type: integer
                            description: Current page number
                            example: 1
                          itemsPerPage:
                            type: integer
                            description: Number of items per page
                            example: 10
        '400':
          description: Invalid pagination parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/dashboard/statistics/bookings:
    get:
      summary: Get booking statistics for dashboard
      tags: [Dashboard]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: month
          schema:
            type: integer
            minimum: 1
            maximum: 12
          description: Month (1-12)
          example: 12
        - in: query
          name: year
          schema:
            type: integer
            minimum: 2000
            maximum: 2100
          description: Year
          example: 2024
      responses:
        '200':
          description: Booking statistics retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            buildingName:
                              type: string
                              description: Name of the building
                              example: "Conference Room A"
                            totalBookings:
                              type: integer
                              description: Total number of bookings for this building
                              example: 15
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/dashboard/statistics/transactions:
    get:
      summary: Get transaction statistics for dashboard
      tags: [Dashboard]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: month
          schema:
            type: integer
            minimum: 1
            maximum: 12
          description: Month (1-12)
          example: 12
        - in: query
          name: year
          schema:
            type: integer
            minimum: 2000
            maximum: 2100
          description: Year
          example: 2024
      responses:
        '200':
          description: Transaction statistics retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            month:
                              type: string
                              description: Month in MM-YYYY format
                              example: "12-2024"
                            totalTransactions:
                              type: integer
                              description: Total number of transactions
                              example: 25
                            totalRevenue:
                              type: integer
                              description: Total revenue amount
                              example: 12500000
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/admin/bookings:
    get:
      summary: Get pending bookings (Admin)
      tags: [Admin - Bookings]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: ['PROCESSING', 'APPROVED', 'REJECTED', 'COMPLETED']
            default: 'PROCESSING'
          description: Filter by booking status
          example: 'PROCESSING'
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
          example: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
          example: 10
      responses:
        '200':
          description: Bookings retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            bookingId:
                              type: string
                              format: uuid
                              description: Unique identifier for the booking
                            buildingName:
                              type: string
                              description: Name of the booked building
                            activityName:
                              type: string
                              description: Name of the activity
                            startDate:
                              type: string
                              description: Start date in DD-MM-YYYY format
                              example: "25-12-2024"
                            endDate:
                              type: string
                              description: End date in DD-MM-YYYY format
                              example: "26-12-2024"
                            startTime:
                              type: string
                              description: Start time in HH:MM format
                              example: "09:00"
                            endTime:
                              type: string
                              description: End time in HH:MM format
                              example: "17:00"
                            status:
                              type: string
                              description: Current booking status
                            borrowerName:
                              type: string
                              description: Name of the borrower
                      pagination:
                        type: object
                        properties:
                          totalItems:
                            type: integer
                            description: Total number of bookings
                            example: 25
                          totalPages:
                            type: integer
                            description: Total number of pages
                            example: 3
                          currentPage:
                            type: integer
                            description: Current page number
                            example: 1
                          itemsPerPage:
                            type: integer
                            description: Number of items per page
                            example: 10
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/admin/bookings/{id}/approval:
    patch:
      summary: Approve or reject a booking (Admin)
      tags: [Admin - Bookings]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Booking ID
          example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ['bookingStatus']
              properties:
                bookingStatus:
                  type: string
                  enum: ['APPROVED', 'REJECTED']
                  description: New booking status
                  example: 'APPROVED'
                rejectionReason:
                  type: string
                  description: Reason for rejection (required if status is REJECTED)
                  example: 'Building maintenance scheduled'
      responses:
        '200':
          description: Booking status updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          bookingId:
                            type: string
                            format: uuid
                            description: Unique identifier for the booking
                          buildingName:
                            type: string
                            description: Name of the booked building
                          startDate:
                            type: string
                            description: Start date in DD-MM-YYYY format
                          endDate:
                            type: string
                            description: End date in DD-MM-YYYY format
                          startTime:
                            type: string
                            description: Start time in HH:MM format
                          endTime:
                            type: string
                            description: End time in HH:MM format
                          status:
                            type: string
                            description: Updated booking status
        '400':
          description: Invalid request data or booking status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user
        fullName:
          type: string
          description: Full name of the user
          example: 'John Doe'
        email:
          type: string
          format: email
          description: Email address of the user
          example: 'john.doe@example.com'
        borrowerType:
          type: string
          enum: ['INTERNAL_UNAND', 'EXTERNAL_UNAND']
          description: Type of borrower
        phoneNumber:
          type: string
          description: Phone number of the user
          example: '+62812345678'
        bankName:
          type: string
          description: Bank name for payment
          example: 'Bank BCA'
        bankNumber:
          type: string
          description: Bank account number
          example: '1234567890'
        role:
          type: string
          enum: ['USER', 'ADMIN']
          description: User role
        createdAt:
          type: string
          format: date-time
          description: User creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: User last update timestamp

    Building:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the building
        buildingName:
          type: string
          description: Name of the building
          example: 'Conference Room A'
        description:
          type: string
          description: Description of the building
          example: 'Modern conference room with projector and air conditioning'
        rentalPrice:
          type: number
          description: Rental price per session
          example: 500000
        capacity:
          type: integer
          description: Maximum capacity of the building
          example: 50
        location:
          type: string
          description: Location of the building
          example: 'Floor 2, Building A'
        buildingType:
          type: string
          enum: ['CLASSROOM', 'PKM', 'LABORATORY', 'MULTIFUNCTION', 'SEMINAR']
          description: Type of building
        imageUrl:
          type: string
          description: URL of building image
          example: 'https://example.com/image.jpg'
        facilities:
          type: array
          items:
            $ref: '#/components/schemas/Facility'
        buildingManagers:
          type: array
          items:
            $ref: '#/components/schemas/BuildingManager'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Facility:
      type: object
      properties:
        id:
          type: string
          format: uuid
        facilityName:
          type: string
          description: Name of the facility
          example: 'Projector'
        iconUrl:
          type: string
          description: URL of facility icon
          example: 'https://example.com/projector-icon.png'

    BuildingManager:
      type: object
      properties:
        id:
          type: string
          format: uuid
        managerName:
          type: string
          description: Name of the building manager
          example: 'Jane Smith'
        phoneNumber:
          type: string
          description: Phone number of the manager
          example: '+62812345679'

    RegisterRequest:
      type: object
      required: ['fullName', 'email', 'password', 'borrowerType', 'phoneNumber', 'bankName', 'bankNumber']
      properties:
        fullName:
          type: string
          minLength: 2
          maxLength: 100
          example: 'John Doe'
        email:
          type: string
          format: email
          example: 'john.doe@example.com'
        password:
          type: string
          minLength: 6
          example: 'password123'
        borrowerType:
          type: string
          enum: ['INTERNAL_UNAND', 'EXTERNAL_UNAND']
        phoneNumber:
          type: string
          pattern: '^[0-9+\-\s()]+$'
          minLength: 10
          maxLength: 20
          example: '+62812345678'
        bankName:
          type: string
          minLength: 2
          maxLength: 50
          example: 'Bank BCA'
        bankNumber:
          type: string
          pattern: '^[0-9]+$'
          minLength: 8
          maxLength: 20
          example: '1234567890'

    LoginRequest:
      type: object
      required: ['email', 'password']
      properties:
        email:
          type: string
          format: email
          example: 'john.doe@example.com'
        password:
          type: string
          example: 'password123'

    CheckAvailabilityRequest:
      type: object
      required: ['date', 'time']
      properties:
        date:
          type: string
          pattern: '^\d{2}-\d{2}-\d{4}$'
          example: '15-12-2024'
          description: Date in DD-MM-YYYY format
        time:
          type: string
          pattern: '^\d{2}:\d{2}$'
          example: '10:00'
          description: Time in HH:MM format

    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the request was successful
        message:
          type: string
          description: Response message
        data:
          type: object
          description: Response data
        timestamp:
          type: string
          format: date-time
          description: Response timestamp

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: 'Error message'
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
        timestamp:
          type: string
          format: date-time 